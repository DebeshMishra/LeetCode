/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        if(head == null || head.next == null)
            return null;
        ListNode intersect = intersection(head);
        if(intersect == null)
            return null;
        
        ListNode start = head;
        while(start!=intersect){
            start = start.next;
            intersect = intersect.next;
        }
        
        return start;
    }
    
    public ListNode intersection(ListNode head){
        ListNode fast = head;
        ListNode slow = head;
        
        while(fast!=null && fast.next!=null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast){
                return fast;
            }
        }
        return null;
    }
}